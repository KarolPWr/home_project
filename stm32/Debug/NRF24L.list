
NRF24L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025bc  080025bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080025d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080025d0  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158f  00000000  00000000  0002aa37  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005b8  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000520  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001743d  00000000  00000000  0002caa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e09  00000000  00000000  00043edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007da00  00000000  00000000  0004ace6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c86e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001604  00000000  00000000  000c8764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002574 	.word	0x08002574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002574 	.word	0x08002574

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90d 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 f872 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f917 	bl	8000446 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f8ed 	bl	800040e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c4:	d301      	bcc.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00f      	b.n	80003ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SysTick_Config+0x40>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f7ff ff8e 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <SysTick_Config+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Config+0x40>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ff47 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
 800041a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000420:	f7ff ff5c 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	6978      	ldr	r0, [r7, #20]
 800042c:	f7ff ff8e 	bl	800034c <NVIC_EncodePriority>
 8000430:	4602      	mov	r2, r0
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff5d 	bl	80002f8 <NVIC_SetPriority>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffb0 	bl	80003b4 <SysTick_Config>
 8000454:	4603      	mov	r3, r0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000476:	e14e      	b.n	8000716 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 8140 	beq.w	8000710 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <HAL_GPIO_Init+0x40>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b12      	cmp	r3, #18
 800049e:	d123      	bne.n	80004e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	08da      	lsrs	r2, r3, #3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3208      	adds	r2, #8
 80004a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	220f      	movs	r2, #15
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	08da      	lsrs	r2, r3, #3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3208      	adds	r2, #8
 80004e2:	6939      	ldr	r1, [r7, #16]
 80004e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2203      	movs	r2, #3
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f003 0203 	and.w	r2, r3, #3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xdc>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	f003 0201 	and.w	r2, r3, #1
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 809a 	beq.w	8000710 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	4b55      	ldr	r3, [pc, #340]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a54      	ldr	r2, [pc, #336]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80005f4:	4a50      	ldr	r2, [pc, #320]	; (8000738 <HAL_GPIO_Init+0x2d8>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800061e:	d013      	beq.n	8000648 <HAL_GPIO_Init+0x1e8>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a46      	ldr	r2, [pc, #280]	; (800073c <HAL_GPIO_Init+0x2dc>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d00d      	beq.n	8000644 <HAL_GPIO_Init+0x1e4>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a45      	ldr	r2, [pc, #276]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d007      	beq.n	8000640 <HAL_GPIO_Init+0x1e0>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a44      	ldr	r2, [pc, #272]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d101      	bne.n	800063c <HAL_GPIO_Init+0x1dc>
 8000638:	2303      	movs	r3, #3
 800063a:	e006      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 800063c:	2305      	movs	r3, #5
 800063e:	e004      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000640:	2302      	movs	r3, #2
 8000642:	e002      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000648:	2300      	movs	r3, #0
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	f002 0203 	and.w	r2, r2, #3
 8000650:	0092      	lsls	r2, r2, #2
 8000652:	4093      	lsls	r3, r2
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	4313      	orrs	r3, r2
 8000658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800065a:	4937      	ldr	r1, [pc, #220]	; (8000738 <HAL_GPIO_Init+0x2d8>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	3302      	adds	r3, #2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	43db      	mvns	r3, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4313      	orrs	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800068c:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	43db      	mvns	r3, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4013      	ands	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	43db      	mvns	r3, r3
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	fa22 f303 	lsr.w	r3, r2, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	f47f aea9 	bne.w	8000478 <HAL_GPIO_Init+0x18>
  }
}
 8000726:	bf00      	nop
 8000728:	371c      	adds	r7, #28
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000
 800073c:	48000400 	.word	0x48000400
 8000740:	48000800 	.word	0x48000800
 8000744:	48000c00 	.word	0x48000c00
 8000748:	40010400 	.word	0x40010400

0800074c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
 8000758:	4613      	mov	r3, r2
 800075a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800075c:	787b      	ldrb	r3, [r7, #1]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000762:	887a      	ldrh	r2, [r7, #2]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000768:	e002      	b.n	8000770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076a:	887a      	ldrh	r2, [r7, #2]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	695a      	ldr	r2, [r3, #20]
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	405a      	eors	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	615a      	str	r2, [r3, #20]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d102      	bne.n	80007ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	f000 beda 	b.w	800156e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 816e 	beq.w	8000aa6 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007ca:	4bb5      	ldr	r3, [pc, #724]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f003 030c 	and.w	r3, r3, #12
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d00c      	beq.n	80007f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d6:	4bb2      	ldr	r3, [pc, #712]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f003 030c 	and.w	r3, r3, #12
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d15a      	bne.n	8000898 <HAL_RCC_OscConfig+0xf8>
 80007e2:	4baf      	ldr	r3, [pc, #700]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ee:	d153      	bne.n	8000898 <HAL_RCC_OscConfig+0xf8>
 80007f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007f4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80007fc:	fa93 f3a3 	rbit	r3, r3
 8000800:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000804:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	095b      	lsrs	r3, r3, #5
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b01      	cmp	r3, #1
 800081a:	d102      	bne.n	8000822 <HAL_RCC_OscConfig+0x82>
 800081c:	4ba0      	ldr	r3, [pc, #640]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	e015      	b.n	800084e <HAL_RCC_OscConfig+0xae>
 8000822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000826:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800082a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800082e:	fa93 f3a3 	rbit	r3, r3
 8000832:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800083a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800083e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000842:	fa93 f3a3 	rbit	r3, r3
 8000846:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800084a:	4b95      	ldr	r3, [pc, #596]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000852:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000856:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800085a:	fa92 f2a2 	rbit	r2, r2
 800085e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000862:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000866:	fab2 f282 	clz	r2, r2
 800086a:	b252      	sxtb	r2, r2
 800086c:	f042 0220 	orr.w	r2, r2, #32
 8000870:	b252      	sxtb	r2, r2
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	f002 021f 	and.w	r2, r2, #31
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4013      	ands	r3, r2
 8000880:	2b00      	cmp	r3, #0
 8000882:	f000 810f 	beq.w	8000aa4 <HAL_RCC_OscConfig+0x304>
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f040 8109 	bne.w	8000aa4 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	f000 be6b 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008a2:	d106      	bne.n	80008b2 <HAL_RCC_OscConfig+0x112>
 80008a4:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a7d      	ldr	r2, [pc, #500]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	e030      	b.n	8000914 <HAL_RCC_OscConfig+0x174>
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10c      	bne.n	80008d6 <HAL_RCC_OscConfig+0x136>
 80008bc:	4b78      	ldr	r3, [pc, #480]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a77      	ldr	r2, [pc, #476]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b75      	ldr	r3, [pc, #468]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a74      	ldr	r2, [pc, #464]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	e01e      	b.n	8000914 <HAL_RCC_OscConfig+0x174>
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e0:	d10c      	bne.n	80008fc <HAL_RCC_OscConfig+0x15c>
 80008e2:	4b6f      	ldr	r3, [pc, #444]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a6e      	ldr	r2, [pc, #440]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	4b6c      	ldr	r3, [pc, #432]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a6b      	ldr	r2, [pc, #428]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	e00b      	b.n	8000914 <HAL_RCC_OscConfig+0x174>
 80008fc:	4b68      	ldr	r3, [pc, #416]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a67      	ldr	r2, [pc, #412]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b65      	ldr	r3, [pc, #404]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a64      	ldr	r2, [pc, #400]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 800090e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000912:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000914:	4b62      	ldr	r3, [pc, #392]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f023 020f 	bic.w	r2, r3, #15
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	495f      	ldr	r1, [pc, #380]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000924:	4313      	orrs	r3, r2
 8000926:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d05a      	beq.n	80009e8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000932:	f7ff fca3 	bl	800027c <HAL_GetTick>
 8000936:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800093a:	e00a      	b.n	8000952 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800093c:	f7ff fc9e 	bl	800027c <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	2b64      	cmp	r3, #100	; 0x64
 800094a:	d902      	bls.n	8000952 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800094c:	2303      	movs	r3, #3
 800094e:	f000 be0e 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
 8000952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000956:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800095a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800095e:	fa93 f3a3 	rbit	r3, r3
 8000962:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000966:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	095b      	lsrs	r3, r3, #5
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d102      	bne.n	8000984 <HAL_RCC_OscConfig+0x1e4>
 800097e:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	e015      	b.n	80009b0 <HAL_RCC_OscConfig+0x210>
 8000984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000988:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800098c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000990:	fa93 f3a3 	rbit	r3, r3
 8000994:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800099c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009a4:	fa93 f3a3 	rbit	r3, r3
 80009a8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009ac:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 80009ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009b4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009b8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009bc:	fa92 f2a2 	rbit	r2, r2
 80009c0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80009c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	b252      	sxtb	r2, r2
 80009ce:	f042 0220 	orr.w	r2, r2, #32
 80009d2:	b252      	sxtb	r2, r2
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	f002 021f 	and.w	r2, r2, #31
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d0aa      	beq.n	800093c <HAL_RCC_OscConfig+0x19c>
 80009e6:	e05e      	b.n	8000aa6 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e8:	f7ff fc48 	bl	800027c <HAL_GetTick>
 80009ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009f0:	e00a      	b.n	8000a08 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f2:	f7ff fc43 	bl	800027c <HAL_GetTick>
 80009f6:	4602      	mov	r2, r0
 80009f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b64      	cmp	r3, #100	; 0x64
 8000a00:	d902      	bls.n	8000a08 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f000 bdb3 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
 8000a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a0c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a14:	fa93 f3a3 	rbit	r3, r3
 8000a18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d102      	bne.n	8000a3a <HAL_RCC_OscConfig+0x29a>
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	e015      	b.n	8000a66 <HAL_RCC_OscConfig+0x2c6>
 8000a3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a46:	fa93 f3a3 	rbit	r3, r3
 8000a4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a5a:	fa93 f3a3 	rbit	r3, r3
 8000a5e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_RCC_OscConfig+0x300>)
 8000a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a6a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000a6e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000a72:	fa92 f2a2 	rbit	r2, r2
 8000a76:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000a7a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	b252      	sxtb	r2, r2
 8000a84:	f042 0220 	orr.w	r2, r2, #32
 8000a88:	b252      	sxtb	r2, r2
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	f002 021f 	and.w	r2, r2, #31
 8000a90:	2101      	movs	r1, #1
 8000a92:	fa01 f202 	lsl.w	r2, r1, r2
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1aa      	bne.n	80009f2 <HAL_RCC_OscConfig+0x252>
 8000a9c:	e003      	b.n	8000aa6 <HAL_RCC_OscConfig+0x306>
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	f000 8170 	beq.w	8000d96 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ab6:	4bd0      	ldr	r3, [pc, #832]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00b      	beq.n	8000ada <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ac2:	4bcd      	ldr	r3, [pc, #820]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d16d      	bne.n	8000baa <HAL_RCC_OscConfig+0x40a>
 8000ace:	4bca      	ldr	r3, [pc, #808]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d167      	bne.n	8000baa <HAL_RCC_OscConfig+0x40a>
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ae0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ae4:	fa93 f3a3 	rbit	r3, r3
 8000ae8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000aec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000af0:	fab3 f383 	clz	r3, r3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d102      	bne.n	8000b0a <HAL_RCC_OscConfig+0x36a>
 8000b04:	4bbc      	ldr	r3, [pc, #752]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	e013      	b.n	8000b32 <HAL_RCC_OscConfig+0x392>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b10:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b14:	fa93 f3a3 	rbit	r3, r3
 8000b18:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b22:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b26:	fa93 f3a3 	rbit	r3, r3
 8000b2a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b2e:	4bb2      	ldr	r3, [pc, #712]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b32:	2202      	movs	r2, #2
 8000b34:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b38:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b3c:	fa92 f2a2 	rbit	r2, r2
 8000b40:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b44:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b252      	sxtb	r2, r2
 8000b4e:	f042 0220 	orr.w	r2, r2, #32
 8000b52:	b252      	sxtb	r2, r2
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	f002 021f 	and.w	r2, r2, #31
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	4013      	ands	r3, r2
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d007      	beq.n	8000b76 <HAL_RCC_OscConfig+0x3d6>
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d002      	beq.n	8000b76 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f000 bcfc 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b76:	4ba0      	ldr	r3, [pc, #640]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	6959      	ldr	r1, [r3, #20]
 8000b84:	23f8      	movs	r3, #248	; 0xf8
 8000b86:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b8a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000b8e:	fa93 f3a3 	rbit	r3, r3
 8000b92:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000b96:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000b9a:	fab3 f383 	clz	r3, r3
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	4995      	ldr	r1, [pc, #596]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ba8:	e0f5      	b.n	8000d96 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f000 8085 	beq.w	8000cc0 <HAL_RCC_OscConfig+0x520>
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bc0:	fa93 f3a3 	rbit	r3, r3
 8000bc4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000bc8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bcc:	fab3 f383 	clz	r3, r3
 8000bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2301      	movs	r3, #1
 8000bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be0:	f7ff fb4c 	bl	800027c <HAL_GetTick>
 8000be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be8:	e00a      	b.n	8000c00 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bea:	f7ff fb47 	bl	800027c <HAL_GetTick>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d902      	bls.n	8000c00 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f000 bcb7 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
 8000c00:	2302      	movs	r3, #2
 8000c02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_OscConfig+0x490>
 8000c2a:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	e013      	b.n	8000c58 <HAL_RCC_OscConfig+0x4b8>
 8000c30:	2302      	movs	r3, #2
 8000c32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c48:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c4c:	fa93 f3a3 	rbit	r3, r3
 8000c50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c54:	4b68      	ldr	r3, [pc, #416]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	2202      	movs	r2, #2
 8000c5a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c5e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c62:	fa92 f2a2 	rbit	r2, r2
 8000c66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b252      	sxtb	r2, r2
 8000c74:	f042 0220 	orr.w	r2, r2, #32
 8000c78:	b252      	sxtb	r2, r2
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	f002 021f 	and.w	r2, r2, #31
 8000c80:	2101      	movs	r1, #1
 8000c82:	fa01 f202 	lsl.w	r2, r1, r2
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0ae      	beq.n	8000bea <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8c:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6959      	ldr	r1, [r3, #20]
 8000c9a:	23f8      	movs	r3, #248	; 0xf8
 8000c9c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000ca4:	fa93 f3a3 	rbit	r3, r3
 8000ca8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000cac:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cb0:	fab3 f383 	clz	r3, r3
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	494f      	ldr	r1, [pc, #316]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
 8000cbe:	e06a      	b.n	8000d96 <HAL_RCC_OscConfig+0x5f6>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cc6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000cd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	fab3 f383 	clz	r3, r3
 8000cda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cea:	f7ff fac7 	bl	800027c <HAL_GetTick>
 8000cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf2:	e00a      	b.n	8000d0a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fac2 	bl	800027c <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d902      	bls.n	8000d0a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	f000 bc32 	b.w	800156e <HAL_RCC_OscConfig+0xdce>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d102      	bne.n	8000d3a <HAL_RCC_OscConfig+0x59a>
 8000d34:	4b30      	ldr	r3, [pc, #192]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	e013      	b.n	8000d62 <HAL_RCC_OscConfig+0x5c2>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d52:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <HAL_RCC_OscConfig+0x658>)
 8000d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d62:	2202      	movs	r2, #2
 8000d64:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000d68:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000d6c:	fa92 f2a2 	rbit	r2, r2
 8000d70:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000d74:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b252      	sxtb	r2, r2
 8000d7e:	f042 0220 	orr.w	r2, r2, #32
 8000d82:	b252      	sxtb	r2, r2
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	f002 021f 	and.w	r2, r2, #31
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1ae      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80d8 	beq.w	8000f56 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d067      	beq.n	8000e80 <HAL_RCC_OscConfig+0x6e0>
 8000db0:	2301      	movs	r3, #1
 8000db2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <HAL_RCC_OscConfig+0x65c>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa50 	bl	800027c <HAL_GetTick>
 8000ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de0:	e00e      	b.n	8000e00 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000de2:	f7ff fa4b 	bl	800027c <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d906      	bls.n	8000e00 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e3bb      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	10908120 	.word	0x10908120
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e1c:	fa93 f2a3 	rbit	r2, r3
 8000e20:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	fa93 f2a3 	rbit	r2, r3
 8000e38:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3e:	4ba5      	ldr	r3, [pc, #660]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e42:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e46:	2102      	movs	r1, #2
 8000e48:	6019      	str	r1, [r3, #0]
 8000e4a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	fa93 f1a3 	rbit	r1, r3
 8000e54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e58:	6019      	str	r1, [r3, #0]
  return(result);
 8000e5a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	fab3 f383 	clz	r3, r3
 8000e64:	b25b      	sxtb	r3, r3
 8000e66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e6a:	b25b      	sxtb	r3, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0b1      	beq.n	8000de2 <HAL_RCC_OscConfig+0x642>
 8000e7e:	e06a      	b.n	8000f56 <HAL_RCC_OscConfig+0x7b6>
 8000e80:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	fa93 f2a3 	rbit	r2, r3
 8000e92:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e96:	601a      	str	r2, [r3, #0]
  return(result);
 8000e98:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000e9c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b8c      	ldr	r3, [pc, #560]	; (80010d8 <HAL_RCC_OscConfig+0x938>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2300      	movs	r3, #0
 8000eae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff f9e4 	bl	800027c <HAL_GetTick>
 8000eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eb8:	e009      	b.n	8000ece <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eba:	f7ff f9df 	bl	800027c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e34f      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 8000ece:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	fa93 f2a3 	rbit	r2, r3
 8000ee0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eea:	2202      	movs	r2, #2
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	fa93 f2a3 	rbit	r2, r3
 8000ef8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f02:	2202      	movs	r2, #2
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	fa93 f2a3 	rbit	r2, r3
 8000f10:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f16:	4b6f      	ldr	r3, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1e:	2102      	movs	r1, #2
 8000f20:	6019      	str	r1, [r3, #0]
 8000f22:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	fa93 f1a3 	rbit	r1, r3
 8000f2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f30:	6019      	str	r1, [r3, #0]
  return(result);
 8000f32:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	fab3 f383 	clz	r3, r3
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1b1      	bne.n	8000eba <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	f000 8159 	beq.w	8001218 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d112      	bne.n	8000f9e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4a55      	ldr	r2, [pc, #340]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	61d3      	str	r3, [r2, #28]
 8000f84:	4b53      	ldr	r3, [pc, #332]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <HAL_RCC_OscConfig+0x93c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11a      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x93c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a4b      	ldr	r2, [pc, #300]	; (80010dc <HAL_RCC_OscConfig+0x93c>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff f961 	bl	800027c <HAL_GetTick>
 8000fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbe:	e009      	b.n	8000fd4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc0:	f7ff f95c 	bl	800027c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b64      	cmp	r3, #100	; 0x64
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e2cc      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	4b41      	ldr	r3, [pc, #260]	; (80010dc <HAL_RCC_OscConfig+0x93c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0ef      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d106      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x858>
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a39      	ldr	r2, [pc, #228]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	e02f      	b.n	8001058 <HAL_RCC_OscConfig+0x8b8>
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x87c>
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0x8b8>
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0x8a0>
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0x8b8>
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	6213      	str	r3, [r2, #32]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 8001052:	f023 0304 	bic.w	r3, r3, #4
 8001056:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06b      	beq.n	800113a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff f90b 	bl	800027c <HAL_GetTick>
 8001066:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106a:	e00b      	b.n	8001084 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800106c:	f7ff f906 	bl	800027c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e274      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 8001084:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001088:	2202      	movs	r2, #2
 800108a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	fa93 f2a3 	rbit	r2, r3
 8001096:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010a0:	2202      	movs	r2, #2
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	fa93 f2a3 	rbit	r2, r3
 80010ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010b2:	601a      	str	r2, [r3, #0]
  return(result);
 80010b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	095b      	lsrs	r3, r3, #5
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d108      	bne.n	80010e0 <HAL_RCC_OscConfig+0x940>
 80010ce:	4b01      	ldr	r3, [pc, #4]	; (80010d4 <HAL_RCC_OscConfig+0x934>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	e013      	b.n	80010fc <HAL_RCC_OscConfig+0x95c>
 80010d4:	40021000 	.word	0x40021000
 80010d8:	10908120 	.word	0x10908120
 80010dc:	40007000 	.word	0x40007000
 80010e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010e4:	2202      	movs	r2, #2
 80010e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	fa93 f2a3 	rbit	r2, r3
 80010f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	4bbb      	ldr	r3, [pc, #748]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001100:	2102      	movs	r1, #2
 8001102:	6011      	str	r1, [r2, #0]
 8001104:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	fa92 f1a2 	rbit	r1, r2
 800110e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001112:	6011      	str	r1, [r2, #0]
  return(result);
 8001114:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	fab2 f282 	clz	r2, r2
 800111e:	b252      	sxtb	r2, r2
 8001120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001124:	b252      	sxtb	r2, r2
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f002 021f 	and.w	r2, r2, #31
 800112c:	2101      	movs	r1, #1
 800112e:	fa01 f202 	lsl.w	r2, r1, r2
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d099      	beq.n	800106c <HAL_RCC_OscConfig+0x8cc>
 8001138:	e064      	b.n	8001204 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff f89f 	bl	800027c <HAL_GetTick>
 800113e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff f89a 	bl	800027c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e208      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 800115c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001160:	2202      	movs	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	fa93 f2a3 	rbit	r2, r3
 800116e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001178:	2202      	movs	r2, #2
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	fa93 f2a3 	rbit	r2, r3
 8001186:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800118a:	601a      	str	r2, [r3, #0]
  return(result);
 800118c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001190:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0xa0c>
 80011a6:	4b90      	ldr	r3, [pc, #576]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	e00d      	b.n	80011c8 <HAL_RCC_OscConfig+0xa28>
 80011ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011b0:	2202      	movs	r2, #2
 80011b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	fa93 f2a3 	rbit	r2, r3
 80011be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011cc:	2102      	movs	r1, #2
 80011ce:	6011      	str	r1, [r2, #0]
 80011d0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	fa92 f1a2 	rbit	r1, r2
 80011da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011de:	6011      	str	r1, [r2, #0]
  return(result);
 80011e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	fab2 f282 	clz	r2, r2
 80011ea:	b252      	sxtb	r2, r2
 80011ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f0:	b252      	sxtb	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f002 021f 	and.w	r2, r2, #31
 80011f8:	2101      	movs	r1, #1
 80011fa:	fa01 f202 	lsl.w	r2, r1, r2
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d19f      	bne.n	8001144 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001204:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001208:	2b01      	cmp	r3, #1
 800120a:	d105      	bne.n	8001218 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120c:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	4a75      	ldr	r2, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 8001212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001216:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 81a4 	beq.w	800156c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	4b70      	ldr	r3, [pc, #448]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	f000 819b 	beq.w	8001568 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b02      	cmp	r3, #2
 800123a:	f040 8113 	bne.w	8001464 <HAL_RCC_OscConfig+0xcc4>
 800123e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	fa93 f2a3 	rbit	r2, r3
 8001252:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001256:	601a      	str	r2, [r3, #0]
  return(result);
 8001258:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800125c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	461a      	mov	r2, r3
 800126e:	2300      	movs	r3, #0
 8001270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff f803 	bl	800027c <HAL_GetTick>
 8001276:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127a:	e009      	b.n	8001290 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7fe fffe 	bl	800027c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e16e      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 8001290:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	fa93 f2a3 	rbit	r2, r3
 80012a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012a8:	601a      	str	r2, [r3, #0]
  return(result);
 80012aa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	fab3 f383 	clz	r3, r3
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	f043 0301 	orr.w	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_OscConfig+0xb2a>
 80012c4:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	e01b      	b.n	8001302 <HAL_RCC_OscConfig+0xb62>
 80012ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	fa93 f2a3 	rbit	r2, r3
 80012f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001306:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800130a:	6011      	str	r1, [r2, #0]
 800130c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	fa92 f1a2 	rbit	r1, r2
 8001316:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800131a:	6011      	str	r1, [r2, #0]
  return(result);
 800131c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	fab2 f282 	clz	r2, r2
 8001326:	b252      	sxtb	r2, r2
 8001328:	f042 0220 	orr.w	r2, r2, #32
 800132c:	b252      	sxtb	r2, r2
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	f002 021f 	and.w	r2, r2, #31
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f202 	lsl.w	r2, r1, r2
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d19d      	bne.n	800127c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001340:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	430b      	orrs	r3, r1
 8001356:	4924      	ldr	r1, [pc, #144]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
 800135c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	fa93 f2a3 	rbit	r2, r3
 8001370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001374:	601a      	str	r2, [r3, #0]
  return(result);
 8001376:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800137c:	fab3 f383 	clz	r3, r3
 8001380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	461a      	mov	r2, r3
 800138c:	2301      	movs	r3, #1
 800138e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7fe ff74 	bl	800027c <HAL_GetTick>
 8001394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	e009      	b.n	80013ae <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139a:	f7fe ff6f 	bl	800027c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e0df      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 80013ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	fa93 f2a3 	rbit	r2, r3
 80013c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013c6:	601a      	str	r2, [r3, #0]
  return(result);
 80013c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	095b      	lsrs	r3, r3, #5
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d104      	bne.n	80013ec <HAL_RCC_OscConfig+0xc4c>
 80013e2:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <HAL_RCC_OscConfig+0xc48>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xc84>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f2a3 	rbit	r2, r3
 8001400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800140a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4b55      	ldr	r3, [pc, #340]	; (8001578 <HAL_RCC_OscConfig+0xdd8>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001428:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800142c:	6011      	str	r1, [r2, #0]
 800142e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	fa92 f1a2 	rbit	r1, r2
 8001438:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800143c:	6011      	str	r1, [r2, #0]
  return(result);
 800143e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	fab2 f282 	clz	r2, r2
 8001448:	b252      	sxtb	r2, r2
 800144a:	f042 0220 	orr.w	r2, r2, #32
 800144e:	b252      	sxtb	r2, r2
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	f002 021f 	and.w	r2, r2, #31
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f202 	lsl.w	r2, r1, r2
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d09b      	beq.n	800139a <HAL_RCC_OscConfig+0xbfa>
 8001462:	e083      	b.n	800156c <HAL_RCC_OscConfig+0xdcc>
 8001464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800146c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	fa93 f2a3 	rbit	r2, r3
 8001478:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147c:	601a      	str	r2, [r3, #0]
  return(result);
 800147e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001482:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001484:	fab3 f383 	clz	r3, r3
 8001488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800148c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	461a      	mov	r2, r3
 8001494:	2300      	movs	r3, #0
 8001496:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7fe fef0 	bl	800027c <HAL_GetTick>
 800149c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a0:	e009      	b.n	80014b6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a2:	f7fe feeb 	bl	800027c <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e05b      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
 80014b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f2a3 	rbit	r2, r3
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	601a      	str	r2, [r3, #0]
  return(result);
 80014d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	095b      	lsrs	r3, r3, #5
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0xd50>
 80014ea:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_RCC_OscConfig+0xdd8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0xd88>
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fa93 f2a3 	rbit	r2, r3
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	fa93 f2a3 	rbit	r2, r3
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_RCC_OscConfig+0xdd8>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f107 0214 	add.w	r2, r7, #20
 800152c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001530:	6011      	str	r1, [r2, #0]
 8001532:	f107 0214 	add.w	r2, r7, #20
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	fa92 f1a2 	rbit	r1, r2
 800153c:	f107 0210 	add.w	r2, r7, #16
 8001540:	6011      	str	r1, [r2, #0]
  return(result);
 8001542:	f107 0210 	add.w	r2, r7, #16
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b252      	sxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b252      	sxtb	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d19d      	bne.n	80014a2 <HAL_RCC_OscConfig+0xd02>
 8001566:	e001      	b.n	800156c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09e      	sub	sp, #120	; 0x78
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001586:	2300      	movs	r3, #0
 8001588:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e164      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b92      	ldr	r3, [pc, #584]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b8f      	ldr	r3, [pc, #572]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	498d      	ldr	r1, [pc, #564]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b8b      	ldr	r3, [pc, #556]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e14c      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4981      	ldr	r1, [pc, #516]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80df 	beq.w	80017ae <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d13d      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf8>
 80015f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001608:	fab3 f383 	clz	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d102      	bne.n	8001622 <HAL_RCC_ClockConfig+0xa6>
 800161c:	4b71      	ldr	r3, [pc, #452]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e00f      	b.n	8001642 <HAL_RCC_ClockConfig+0xc6>
 8001622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001626:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162a:	fa93 f3a3 	rbit	r3, r3
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
 8001630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001634:	663b      	str	r3, [r7, #96]	; 0x60
 8001636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800163e:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001646:	65ba      	str	r2, [r7, #88]	; 0x58
 8001648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800164a:	fa92 f2a2 	rbit	r2, r2
 800164e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001652:	fab2 f282 	clz	r2, r2
 8001656:	b252      	sxtb	r2, r2
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	b252      	sxtb	r2, r2
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	f002 021f 	and.w	r2, r2, #31
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d17d      	bne.n	800176c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0f4      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d13d      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x17c>
 800167c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001680:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800168a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d102      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x12a>
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	e00f      	b.n	80016c6 <HAL_RCC_ClockConfig+0x14a>
 80016a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
 80016b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
 80016ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c2:	4b48      	ldr	r3, [pc, #288]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80016cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ce:	fa92 f2a2 	rbit	r2, r2
 80016d2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80016d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016d6:	fab2 f282 	clz	r2, r2
 80016da:	b252      	sxtb	r2, r2
 80016dc:	f042 0220 	orr.w	r2, r2, #32
 80016e0:	b252      	sxtb	r2, r2
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d13b      	bne.n	800176c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b2      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
 80016f8:	2302      	movs	r3, #2
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	095b      	lsrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <HAL_RCC_ClockConfig+0x1a4>
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	e00d      	b.n	800173c <HAL_RCC_ClockConfig+0x1c0>
 8001720:	2302      	movs	r3, #2
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2202      	movs	r2, #2
 800173e:	61ba      	str	r2, [r7, #24]
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	fa92 f2a2 	rbit	r2, r2
 8001746:	617a      	str	r2, [r7, #20]
  return(result);
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	fab2 f282 	clz	r2, r2
 800174e:	b252      	sxtb	r2, r2
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	b252      	sxtb	r2, r2
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	f002 021f 	and.w	r2, r2, #31
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f202 	lsl.w	r2, r1, r2
 8001762:	4013      	ands	r3, r2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e078      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 0203 	bic.w	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	491a      	ldr	r1, [pc, #104]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800177e:	f7fe fd7d 	bl	800027c <HAL_GetTick>
 8001782:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001784:	e00a      	b.n	800179c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7fe fd79 	bl	800027c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e060      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_ClockConfig+0x268>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 020c 	and.w	r2, r3, #12
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d1eb      	bne.n	8001786 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d215      	bcs.n	80017e8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 0207 	bic.w	r2, r3, #7
 80017c4:	4906      	ldr	r1, [pc, #24]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_RCC_ClockConfig+0x264>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d006      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e03f      	b.n	800185e <HAL_RCC_ClockConfig+0x2e2>
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000
 80017e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_RCC_ClockConfig+0x2ec>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4919      	ldr	r1, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x2ec>)
 8001802:	4313      	orrs	r3, r2
 8001804:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_RCC_ClockConfig+0x2ec>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4911      	ldr	r1, [pc, #68]	; (8001868 <HAL_RCC_ClockConfig+0x2ec>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001826:	f000 f825 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 800182a:	4601      	mov	r1, r0
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x2ec>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001834:	23f0      	movs	r3, #240	; 0xf0
 8001836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	fa93 f3a3 	rbit	r3, r3
 800183e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_RCC_ClockConfig+0x2f0>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	fa21 f303 	lsr.w	r3, r1, r3
 8001852:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_RCC_ClockConfig+0x2f4>)
 8001854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f7fe fccc 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3778      	adds	r7, #120	; 0x78
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	080025ac 	.word	0x080025ac
 8001870:	20000008 	.word	0x20000008

08001874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 030c 	and.w	r3, r3, #12
 800189a:	2b04      	cmp	r3, #4
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x30>
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_GetSysClockFreq+0x36>
 80018a2:	e03c      	b.n	800191e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018a6:	623b      	str	r3, [r7, #32]
      break;
 80018a8:	e03c      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018b4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	607b      	str	r3, [r7, #4]
  return(result);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_RCC_GetSysClockFreq+0xc8>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f003 020f 	and.w	r2, r3, #15
 80018d6:	230f      	movs	r3, #15
 80018d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa93 f3a3 	rbit	r3, r3
 80018e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	4a14      	ldr	r2, [pc, #80]	; (8001940 <HAL_RCC_GetSysClockFreq+0xcc>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fbb2 f2f3 	udiv	r2, r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
 800190c:	e004      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	623b      	str	r3, [r7, #32]
      break;
 800191c:	e002      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001920:	623b      	str	r3, [r7, #32]
      break;
 8001922:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001924:	6a3b      	ldr	r3, [r7, #32]
}
 8001926:	4618      	mov	r0, r3
 8001928:	372c      	adds	r7, #44	; 0x2c
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	007a1200 	.word	0x007a1200
 800193c:	0800258c 	.word	0x0800258c
 8001940:	0800259c 	.word	0x0800259c
 8001944:	003d0900 	.word	0x003d0900

08001948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e084      	b.n	8001a64 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	d106      	bne.n	800197a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fccd 	bl	8002314 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2202      	movs	r2, #2
 800197e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001990:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800199a:	d902      	bls.n	80019a2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e002      	b.n	80019a8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80019b0:	d007      	beq.n	80019c2 <HAL_SPI_Init+0x7a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019ba:	d002      	beq.n	80019c2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10b      	bne.n	80019e2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019d2:	d903      	bls.n	80019dc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	631a      	str	r2, [r3, #48]	; 0x30
 80019da:	e002      	b.n	80019e2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	ea42 0103 	orr.w	r1, r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	0c1b      	lsrs	r3, r3, #16
 8001a22:	f003 0204 	and.w	r2, r3, #4
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	ea42 0103 	orr.w	r1, r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001a86:	2301      	movs	r3, #1
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_SPI_TransmitReceive+0x32>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e1e2      	b.n	8001e64 <HAL_SPI_TransmitReceive+0x3f8>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aa6:	f7fe fbe9 	bl	800027c <HAL_GetTick>
 8001aaa:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d00e      	beq.n	8001ae0 <HAL_SPI_TransmitReceive+0x74>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac8:	d106      	bne.n	8001ad8 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_SPI_TransmitReceive+0x6c>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d003      	beq.n	8001ae0 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001ade:	e1b7      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0x86>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_SPI_TransmitReceive+0x86>
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001af8:	e1aa      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d003      	beq.n	8001b0e <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	887a      	ldrh	r2, [r7, #2]
 8001b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b50:	d805      	bhi.n	8001b5e <HAL_SPI_TransmitReceive+0xf2>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d908      	bls.n	8001b70 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	e007      	b.n	8001b80 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b8a:	2b40      	cmp	r3, #64	; 0x40
 8001b8c:	d007      	beq.n	8001b9e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001ba6:	d975      	bls.n	8001c94 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x14e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d160      	bne.n	8001c7c <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	881a      	ldrh	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bd8:	e050      	b.n	8001c7c <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01c      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x1ae>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d017      	beq.n	8001c1a <HAL_SPI_TransmitReceive+0x1ae>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d110      	bne.n	8001c1a <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	881a      	ldrh	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3302      	adds	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01a      	beq.n	8001c5c <HAL_SPI_TransmitReceive+0x1f0>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d113      	bne.n	8001c5c <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3302      	adds	r3, #2
 8001c44:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c62:	d00b      	beq.n	8001c7c <HAL_SPI_TransmitReceive+0x210>
 8001c64:	f7fe fb0a 	bl	800027c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d803      	bhi.n	8001c7c <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001c7a:	e0e9      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1a9      	bne.n	8001bda <HAL_SPI_TransmitReceive+0x16e>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1a3      	bne.n	8001bda <HAL_SPI_TransmitReceive+0x16e>
 8001c92:	e0c9      	b.n	8001e28 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_SPI_TransmitReceive+0x23c>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 80b3 	bne.w	8001e0e <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d90f      	bls.n	8001cd2 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3b02      	subs	r3, #2
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001cd0:	e09d      	b.n	8001e0e <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	6812      	ldr	r2, [r2, #0]
 8001cdc:	320c      	adds	r2, #12
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cf0:	e08d      	b.n	8001e0e <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d031      	beq.n	8001d5c <HAL_SPI_TransmitReceive+0x2f0>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02c      	beq.n	8001d5c <HAL_SPI_TransmitReceive+0x2f0>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d125      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d90f      	bls.n	8001d3a <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	881a      	ldrh	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3302      	adds	r3, #2
 8001d28:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d38:	e00e      	b.n	8001d58 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	60ba      	str	r2, [r7, #8]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	320c      	adds	r2, #12
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d042      	beq.n	8001dee <HAL_SPI_TransmitReceive+0x382>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d13b      	bne.n	8001dee <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d920      	bls.n	8001dc4 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3302      	adds	r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b02      	subs	r3, #2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d81b      	bhi.n	8001dea <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	e012      	b.n	8001dea <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f103 020c 	add.w	r2, r3, #12
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1c59      	adds	r1, r3, #1
 8001dd0:	6079      	str	r1, [r7, #4]
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dea:	2301      	movs	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d00b      	beq.n	8001e0e <HAL_SPI_TransmitReceive+0x3a2>
 8001df6:	f7fe fa41 	bl	800027c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d803      	bhi.n	8001e0e <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8001e0c:	e020      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f47f af6c 	bne.w	8001cf2 <HAL_SPI_TransmitReceive+0x286>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f47f af65 	bne.w	8001cf2 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 f901 	bl	8002034 <SPI_EndRxTxTransaction>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001e4c:	e000      	b.n	8001e50 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8001e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e92:	e04c      	b.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d048      	beq.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8001ea2:	f7fe f9eb 	bl	800027c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d83d      	bhi.n	8001f2e <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001eca:	d111      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed4:	d004      	beq.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d107      	bne.n	8001ef0 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef8:	d10f      	bne.n	8001f1a <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e00e      	b.n	8001f4c <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d101      	bne.n	8001f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8001f3e:	2201      	movs	r2, #1
 8001f40:	e000      	b.n	8001f44 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001f42:	2200      	movs	r2, #0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d1a4      	bne.n	8001e94 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8001f62:	e05a      	b.n	800201a <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001f6a:	d109      	bne.n	8001f80 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	330c      	adds	r3, #12
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f86:	d048      	beq.n	800201a <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
 8001f8e:	f7fe f975 	bl	800027c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d83d      	bhi.n	800201a <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fb6:	d111      	bne.n	8001fdc <SPI_WaitFifoStateUntilTimeout+0x88>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc0:	d004      	beq.n	8001fcc <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d107      	bne.n	8001fdc <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d10f      	bne.n	8002006 <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e008      	b.n	800202c <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4013      	ands	r3, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d19c      	bne.n	8001f64 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af02      	add	r7, sp, #8
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff ff81 	bl	8001f54 <SPI_WaitFifoStateUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e027      	b.n	80020b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff ff06 	bl	8001e84 <SPI_WaitFlagStateUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	f043 0220 	orr.w	r2, r3, #32
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e014      	b.n	80020b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff ff5a 	bl	8001f54 <SPI_WaitFifoStateUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	f043 0220 	orr.w	r2, r3, #32
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e000      	b.n	80020b8 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c6:	f7fe f87f 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ca:	f000 f83d 	bl	8002148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ce:	f000 f8b5 	bl	800223c <MX_GPIO_Init>
  MX_SPI2_Init();
 80020d2:	f000 f875 	bl	80021c0 <MX_SPI2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  uint8_t TxBuf[4] = {0x00};
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
	  uint8_t RxBuf[4] = {0};
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]

	  HAL_GPIO_WritePin(GPIOB, SPI_CE, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	2104      	movs	r1, #4
 80020e2:	4817      	ldr	r0, [pc, #92]	; (8002140 <main+0x80>)
 80020e4:	f7fe fb32 	bl	800074c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPI_NSS, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ee:	4814      	ldr	r0, [pc, #80]	; (8002140 <main+0x80>)
 80020f0:	f7fe fb2c 	bl	800074c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi2, TxBuf, RxBuf, sizeof(TxBuf), 1000);
 80020f4:	463a      	mov	r2, r7
 80020f6:	1d39      	adds	r1, r7, #4
 80020f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2304      	movs	r3, #4
 8002100:	4810      	ldr	r0, [pc, #64]	; (8002144 <main+0x84>)
 8002102:	f7ff fcb3 	bl	8001a6c <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, SPI_CE, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2104      	movs	r1, #4
 800210a:	480d      	ldr	r0, [pc, #52]	; (8002140 <main+0x80>)
 800210c:	f7fe fb1e 	bl	800074c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SPI_NSS, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002116:	480a      	ldr	r0, [pc, #40]	; (8002140 <main+0x80>)
 8002118:	f7fe fb18 	bl	800074c <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */
	  if (HAL_SPI_GetError(&hspi2) != 0x00000000U)
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <main+0x84>)
 800211e:	f7ff fea5 	bl	8001e6c <HAL_SPI_GetError>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0d6      	beq.n	80020d6 <main+0x16>
	  	  {
	  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800212c:	4804      	ldr	r0, [pc, #16]	; (8002140 <main+0x80>)
 800212e:	f7fe fb25 	bl	800077c <HAL_GPIO_TogglePin>
	  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002138:	4801      	ldr	r0, [pc, #4]	; (8002140 <main+0x80>)
 800213a:	f7fe fb07 	bl	800074c <HAL_GPIO_WritePin>
  {
 800213e:	e7ca      	b.n	80020d6 <main+0x16>
 8002140:	48000400 	.word	0x48000400
 8002144:	2000002c 	.word	0x2000002c

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b090      	sub	sp, #64	; 0x40
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0318 	add.w	r3, r7, #24
 8002152:	2228      	movs	r2, #40	; 0x28
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fa04 	bl	8002564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800216e:	2301      	movs	r3, #1
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002172:	2310      	movs	r3, #16
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002176:	2300      	movs	r3, #0
 8002178:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fb0e 	bl	80007a0 <HAL_RCC_OscConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800218a:	f000 f897 	bl	80022bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218e:	230f      	movs	r3, #15
 8002190:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f9e8 	bl	800157c <HAL_RCC_ClockConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80021b2:	f000 f883 	bl	80022bc <Error_Handler>
  }
}
 80021b6:	bf00      	nop
 80021b8:	3740      	adds	r7, #64	; 0x40
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MX_SPI2_Init+0x74>)
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <MX_SPI2_Init+0x78>)
 80021c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <MX_SPI2_Init+0x74>)
 80021cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <MX_SPI2_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <MX_SPI2_Init+0x74>)
 80021da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <MX_SPI2_Init+0x74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MX_SPI2_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_SPI2_Init+0x74>)
 80021ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MX_SPI2_Init+0x74>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <MX_SPI2_Init+0x74>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MX_SPI2_Init+0x74>)
 8002202:	2200      	movs	r2, #0
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_SPI2_Init+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800220c:	4b09      	ldr	r3, [pc, #36]	; (8002234 <MX_SPI2_Init+0x74>)
 800220e:	2207      	movs	r2, #7
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_SPI2_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <MX_SPI2_Init+0x74>)
 800221a:	2208      	movs	r2, #8
 800221c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_SPI2_Init+0x74>)
 8002220:	f7ff fb92 	bl	8001948 <HAL_SPI_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800222a:	f000 f847 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	2000002c 	.word	0x2000002c
 8002238:	40003800 	.word	0x40003800

0800223c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002242:	f107 030c 	add.w	r3, r7, #12
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_GPIO_Init+0x78>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <MX_GPIO_Init+0x78>)
 8002258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225c:	6153      	str	r3, [r2, #20]
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <MX_GPIO_Init+0x78>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <MX_GPIO_Init+0x78>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <MX_GPIO_Init+0x78>)
 8002270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002274:	6153      	str	r3, [r2, #20]
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_GPIO_Init+0x78>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f642 0104 	movw	r1, #10244	; 0x2804
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <MX_GPIO_Init+0x7c>)
 800228a:	f7fe fa5f 	bl	800074c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB11 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_13;
 800228e:	f642 0304 	movw	r3, #10244	; 0x2804
 8002292:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	4619      	mov	r1, r3
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <MX_GPIO_Init+0x7c>)
 80022a8:	f7fe f8da 	bl	8000460 <HAL_GPIO_Init>

}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	48000400 	.word	0x48000400

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_MspInit+0x44>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_MspInit+0x44>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6193      	str	r3, [r2, #24]
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_MspInit+0x44>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_MspInit+0x44>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_MspInit+0x44>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_MspInit+0x44>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_SPI_MspInit+0xb4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d144      	bne.n	80023c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	61d3      	str	r3, [r2, #28]
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002358:	6153      	str	r3, [r2, #20]
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002370:	6153      	str	r3, [r2, #20]
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PF1-OSC_OUT     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800237e:	2302      	movs	r3, #2
 8002380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800238e:	2305      	movs	r3, #5
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <HAL_SPI_MspInit+0xbc>)
 800239a:	f7fe f861 	bl	8000460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800239e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b0:	2305      	movs	r3, #5
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <HAL_SPI_MspInit+0xc0>)
 80023bc:	f7fe f850 	bl	8000460 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40003800 	.word	0x40003800
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48001400 	.word	0x48001400
 80023d4:	48000400 	.word	0x48000400

080023d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f7fd ff12 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b1f      	ldr	r3, [pc, #124]	; (80024b8 <SystemInit+0x84>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a1e      	ldr	r2, [pc, #120]	; (80024b8 <SystemInit+0x84>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <SystemInit+0x88>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <SystemInit+0x88>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <SystemInit+0x88>)
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4918      	ldr	r1, [pc, #96]	; (80024bc <SystemInit+0x88>)
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <SystemInit+0x8c>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <SystemInit+0x88>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <SystemInit+0x88>)
 8002466:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800246a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <SystemInit+0x88>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a11      	ldr	r2, [pc, #68]	; (80024bc <SystemInit+0x88>)
 8002476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <SystemInit+0x88>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <SystemInit+0x88>)
 8002482:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002486:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <SystemInit+0x88>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <SystemInit+0x88>)
 800248e:	f023 030f 	bic.w	r3, r3, #15
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <SystemInit+0x88>)
 8002496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002498:	4908      	ldr	r1, [pc, #32]	; (80024bc <SystemInit+0x88>)
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <SystemInit+0x90>)
 800249c:	4013      	ands	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <SystemInit+0x88>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <SystemInit+0x84>)
 80024a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ac:	609a      	str	r2, [r3, #8]
#endif
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00
 80024bc:	40021000 	.word	0x40021000
 80024c0:	f87fc00c 	.word	0xf87fc00c
 80024c4:	ff00fccc 	.word	0xff00fccc

080024c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024ce:	e003      	b.n	80024d8 <LoopCopyDataInit>

080024d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024d6:	3104      	adds	r1, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopForever+0xe>)
	adds	r2, r0, r1
 80024dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024e0:	d3f6      	bcc.n	80024d0 <CopyDataInit>
	ldr	r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024e4:	e002      	b.n	80024ec <LoopFillZerobss>

080024e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024e8:	f842 3b04 	str.w	r3, [r2], #4

080024ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LoopForever+0x16>)
	cmp	r2, r3
 80024ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024f0:	d3f9      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024f2:	f7ff ff9f 	bl	8002434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f000 f811 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fa:	f7ff fde1 	bl	80020c0 <main>

080024fe <LoopForever>:

LoopForever:
    b LoopForever
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002500:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8002504:	080025c4 	.word	0x080025c4
	ldr	r0, =_sdata
 8002508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800250c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002510:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002514:	20000090 	.word	0x20000090

08002518 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_IRQHandler>
	...

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4e0d      	ldr	r6, [pc, #52]	; (8002554 <__libc_init_array+0x38>)
 8002520:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002522:	1ba4      	subs	r4, r4, r6
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	2500      	movs	r5, #0
 8002528:	42a5      	cmp	r5, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	4e0b      	ldr	r6, [pc, #44]	; (800255c <__libc_init_array+0x40>)
 800252e:	4c0c      	ldr	r4, [pc, #48]	; (8002560 <__libc_init_array+0x44>)
 8002530:	f000 f820 	bl	8002574 <_init>
 8002534:	1ba4      	subs	r4, r4, r6
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	2500      	movs	r5, #0
 800253a:	42a5      	cmp	r5, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002544:	4798      	blx	r3
 8002546:	3501      	adds	r5, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800254e:	4798      	blx	r3
 8002550:	3501      	adds	r5, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	080025bc 	.word	0x080025bc
 8002558:	080025bc 	.word	0x080025bc
 800255c:	080025bc 	.word	0x080025bc
 8002560:	080025c0 	.word	0x080025c0

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
